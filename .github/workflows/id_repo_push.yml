name: ID repo maven Package upon a push

on:
  pull_request:
    types: [closed]
  push:
    branches:
      - dev
  
jobs:
  build:

    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        ref: ${{ github.ref }}
        java-version: 1.8
        server-id: central # Value of the distributionManagement/repository/id field of the pom.xml
        settings-path: ${{ github.workspace }} # location for the settings.xml file
    - uses: kolpav/purge-artifacts-action@v1
      with:
        token: ${{ secrets.access_token }}
        expire-in: 0 # Setting this to 0 will delete all artifacts

    - name: Setup branch and GPG public key
      run: |
        # Strip git ref prefix from version
        echo "BRANCH_NAME=$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV
        echo ${{ env.BRANCH_NAME }}
        #echo "::set-env name=GPG_TTY::$(tty)"
        #echo ${{ env.GPG_TTY }}
        #sudo apt-get --yes install gnupg2
        #gpg2 --import ./.github/keys/mosipgpgkey_pub.gpg
        #gpg2 --quiet --batch --passphrase=${{secrets.gpg_secret}}  --allow-secret-key-import --import ./.github/keys/mosipgpgkey_sec.gpg

    - uses: actions/cache@v1
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-${{ env.BRANCH_NAME }}

    - name: Build ID repo
      run: |
        cd id-repository
        mvn -B clean install --file pom.xml -DskipTests -Dgpg.skip

    - name: Ready the springboot artifacts
      run: |
        ls -lrt
        find -name '*.jar' -executable -type f  -exec zip release.zip {} +
        ls -lrt
        ls -lrt kernel/kernel-notification-service

    - name: Upload the springboot jars
      uses: actions/upload-artifact@v1
      with:
        name: release
        path: ./release.zip

  docker-id-repository-identity-service:
    needs: build

    runs-on: ubuntu-latest
    env:
      NAMESPACE: ${{ secrets.dev_namespace_docker_hub }}
      SERVICE_NAME: id-repository-identity-service
      SERVICE_LOCATION: id-repository/id-repository-identity-service

    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v1
        with:
          name: release
          path: ./

      - name: Setup branch name
        run: |
          ## Strip git ref prefix from version
          echo "BRANCH_NAME=$(echo ${{ github.ref }} | sed -e 's,.*/\(.*\),\1,')" >> $GITHUB_ENV
      - name: Get version info from pom
        id: getPomVersion
        uses: mavrosxristoforos/get-xml-info@1.0
        with:
          xml-file: ./${{ env.SERVICE_LOCATION }}/pom.xml
          xpath: /*[local-name()="project"]/*[local-name()="version"]

      - name: Unzip and extract the id-repository-identity-service
        run: unzip -uj "release.zip" "${{ env.SERVICE_LOCATION }}/target/*" -d "./${{ env.SERVICE_LOCATION }}/target"

      - name: Build image
        run: |
          cd "./${{env.SERVICE_LOCATION}}"
          docker build . --file Dockerfile --tag ${{ env.SERVICE_NAME }}
      - name: Log into registry
        run: echo "${{ secrets.release_docker_hub }}" | docker login -u ${{ secrets.actor_docker_hub }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=$NAMESPACE/$SERVICE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          echo "push version ${{steps.getPomVersion.outputs.info}}"
          VERSION=$BRANCH_NAME
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $SERVICE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION